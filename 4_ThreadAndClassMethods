#include <iostream>
#include <thread>
#include <chrono>
#include <stdlib.h>
using namespace std;

class ThreadClass {
public:
    void DoWork() {
        this_thread::sleep_for(chrono::milliseconds(3000));
        cout << "ID потока:" << this_thread::get_id() << "\tDoWork started\t" << endl;
        this_thread::sleep_for(chrono::milliseconds(3000));
        cout << "ID потока:" << this_thread::get_id() << "\tDoWork stopped\t" << endl;
    }

    void DoWork2(int a) {
        this_thread::sleep_for(chrono::milliseconds(3000));
        cout << "ID потока:" << this_thread::get_id() << "\tDoWork2 started\t" << endl;
        this_thread::sleep_for(chrono::milliseconds(3000));
        cout << "DoWork2 значение параметра: " << a << endl;
        cout << "ID потока:" << this_thread::get_id() << "\tDoWork2 stopped\t" << endl;
    }

    int Sum(int a, int b) {
        this_thread::sleep_for(chrono::milliseconds(3000));
        cout << "ID потока:" << this_thread::get_id() << "\tSum started\t" << endl;
        this_thread::sleep_for(chrono::milliseconds(3000));
        cout << "ID потока:" << this_thread::get_id() << "\tSum stopped\t" << endl;
        return a + b;
    }
};

int main() {
    setlocale(LC_ALL, "ru");

    int result;
    ThreadClass tc;

   /* thread t([&]() {
        result = tc.Sum(2, 5);
    }); */

  /*  thread t([&]() {
        tc.DoWork(); 
  }); */

  //  thread t(&ThreadClass::DoWork, tc);

    thread t(&ThreadClass::DoWork2, tc, 5);

    for (size_t i = 1; i <= 10; i++) { // Может начаться раньше
        cout << "ID потока:" << this_thread::get_id() << "\tmain works\t" << i << endl;
        this_thread::sleep_for(chrono::milliseconds(500));
    }

    t.join();
  //  cout << "RESULT\t" << result << endl;
    return 0;
}
